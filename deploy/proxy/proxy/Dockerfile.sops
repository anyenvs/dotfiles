## Stage 1 - building app
## docker build -t sops -f proxy/Dockerfile.sops proxy/
FROM golang:alpine AS SOPSBULD

ARG APP_NAME=${APP_NAME:-tools}
ARG SOPS_VERSION=${SOPS_VERSION:-3.8.1}

WORKDIR /go/src/bin

RUN set -xe ;\
    . /etc/os-release &&\
    _OS=$(uname -s | tr '[:upper:]' '[:lower:]') && _ARCH=$(uname -m | tr '[:upper:]' '[:lower:]' | sed 's/x86_64/amd64/g; s/armv7.*/armv7/g; s/aarch64/arm64/g' ) &&\
    apk --update --no-cache add gnupg jq ca-certificates git make &&\
    apk --update add wget bind-tools &&\
    ping -c 6 api.github.com ; dig +answer +noall api.github.com &&\
    SOPS_URL=$(wget -qO- https://api.github.com/repos/mozilla/sops/releases/latest | jq -r '.assets[] | select(.name | endswith("'${_OS}.${_ARCH}'")) | .browser_download_url' 2>/dev/null ) &&\
    ( test ! -d /go/bin && mkdir -pv /go/bin || true ) &&\
    test -n "${SOPS_URL}" && wget -qO /go/bin/sops ${SOPS_URL} && chmod +x /go/bin/sops &&\
    test -n "${SOPS_URL}" || { echo '===> sops/releases/latest binary for ${_OS}.${_ARCH} not found' ; }

WORKDIR /go/src/
ADD https://github.com/getsops/sops/archive/v${SOPS_VERSION}.tar.gz /go/src/

RUN set -xe ;\
    . /etc/os-release &&\
    _OS=$(uname -s | tr '[:upper:]' '[:lower:]') && _ARCH=$(uname -m | tr '[:upper:]' '[:lower:]' | sed 's/x86_64/amd64/g; s/armv7.*/armv7/g; s/aarch64/arm64/g' ) &&\
    test -f /go/bin/sops && /go/bin/sops --version && echo "===> SOPS binary downloaded hence skipping BUILD" && exit 0 ||\
    echo "===> Buidling SOPS binary" &&\
    tar --strip-components=1 -zxf /go/src/v${SOPS_VERSION}.tar.gz -C /go/src/ &&\
    make install &&\
    chmod +x /go/bin/sops && /go/bin/sops --version ||\
    exit 1
