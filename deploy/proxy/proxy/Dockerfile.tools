## Stage 1 - building SOPS
## https://rakhesh.com/docker/building-a-docker-sops-image/
FROM golang:alpine AS SOPSBULD

ARG APP_NAME=${APP_NAME:-tools}
ARG SOPS_VERSION=${SOPS_VERSION:-3.8.1}

WORKDIR /go/src/bin

RUN set -xe ;\
    . /etc/os-release &&\
    _OS=$(uname -s | tr '[:upper:]' '[:lower:]') && _ARCH=$(uname -m | tr '[:upper:]' '[:lower:]' | sed 's/x86_64/amd64/g; s/armv7.*/armv7/g; s/aarch64/arm64/g' ) &&\
    apk --update --no-cache add gnupg jq ca-certificates git make &&\
    apk --update add wget bind-tools &&\
    ping -c 6 api.github.com ; dig +answer +noall api.github.com &&\
    SOPS_URL=$(wget -qO- https://api.github.com/repos/mozilla/sops/releases/latest | jq -r '.assets[] | select(.name | endswith("'${_OS}.${_ARCH}'")) | .browser_download_url' 2>/dev/null ) &&\
    ( test ! -d /go/bin && mkdir -pv /go/bin || true ) &&\
    test -n "${SOPS_URL}" && wget -qO /go/bin/sops ${SOPS_URL} && chmod +x /go/bin/sops &&\
    test -n "${SOPS_URL}" || { echo '===> sops/releases/latest binary for ${_OS}.${_ARCH} not found' ; }

WORKDIR /go/src/
ADD https://github.com/getsops/sops/archive/v${SOPS_VERSION}.tar.gz /go/src/

RUN set -xe ;\
    . /etc/os-release &&\
    _OS=$(uname -s | tr '[:upper:]' '[:lower:]') && _ARCH=$(uname -m | tr '[:upper:]' '[:lower:]' | sed 's/x86_64/amd64/g; s/armv7.*/armv7/g; s/aarch64/arm64/g' ) &&\
    test -f /go/bin/sops && /go/bin/sops --version && echo "===> SOPS binary downloaded hence skipping BUILD" && exit 0 ||\
    echo "===> Buidling SOPS binary" &&\
    tar --strip-components=1 -zxf /go/src/v${SOPS_VERSION}.tar.gz -C /go/src/ &&\
    make install &&\
    chmod +x /go/bin/sops && /go/bin/sops --version ||\
    exit 1

#FROM golang:1.21-alpine3.19 AS TOOLS ##> failed to resize tty, using default size
FROM golang:1.18-alpine AS TOOLS

ARG APP_NAME=${APP_NAME:-tools}
ARG ENTRYPOINT='proxy/entrypoint.sh'
ARG SOPS_VERSION=${SOPS_VERSION:-3.8.1}

WORKDIR /src/

# download modules in separated layer, to speed up rebuild by utilising Docker layer caching system
#COPY go.mod go.sum /src/
# NOTE: build error may occur due to temporary unavailability of some packages sources
# Wait and build again is usually a good solution
#RUN set -xe &&\
#    go mod download

COPY . /src/
COPY --from=SOPSBULD /go/bin/sops /usr/local/bin/sops

## docker run -it --rm alpine:edge wget -qO- https://api.github.com/repos/mozilla/sops/releases/latest | jq -r '.assets[] | select(.name | endswith("linux")) | .browser_download_url'
## docker run -it --rm golang:1.17 "apk add --update jq && wget get -qO- https://api.github.com/repos/mozilla/sops/releases/latest | jq -r '.assets[] | select(.name | endswith(\"linux\")) | .browser_download_url'"
RUN set -xe ;\
    . /etc/os-release &&\
    _OS=$(uname -s | tr '[:upper:]' '[:lower:]') && _ARCH=$(uname -m | tr '[:upper:]' '[:lower:]' | sed 's/x86_64/amd64/g; s/armv7.*/armv7/g; s/aarch64/arm64/g' ) &&\
    apk --update --no-cache add gnupg jq ca-certificates git make && apk --update add wget bind-tools &&\
    #ping -c 6 api.github.com ; dig +answer +noall api.github.com &&\
    #SOPS_URL=$(wget -qO- https://api.github.com/repos/mozilla/sops/releases/latest | jq -r '.assets[] | select(.name | endswith("'${_OS}.${_ARCH}'")) | .browser_download_url' 2>/dev/null ) &&\
    chmod +x /usr/local/bin/sops /src/${ENTRYPOINT} || true &&\
    #wget -qO- https://dl.dropboxusercontent.com/s/noe19dbp3mxyzgf/appconfig.asc | gpg --import - &&\
    ## /src/config.enc - not required
    ( test -f /src/config.enc && sops -d --input-type yaml /src/config.enc > /src/config.toml || true ) ||\
    exit 1

CMD ["echo", "Proxy Tools build"]
